import clr

clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
from Autodesk.Revit.DB.Structure import *

clr.AddReference('RevitAPIUI')
from Autodesk.Revit.UI import *

clr.AddReference('System')
from System.Collections.Generic import List

clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.GeometryConversion)
clr.ImportExtensions(Revit.Elements)

clr.AddReference('RevitServices')
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

doc = DocumentManager.Instance.CurrentDBDocument
uidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument

# The inputs to this node will be stored as a list in the IN variables.
uGrids = UnwrapElement(IN[0])
newPts = IN[1]
startPtXYZ = IN[2]
crv = []
vec = []
n = 0
e = []

# Place your code below this line

for ug in uGrids:
	crv.append(ug.FullCurve.ToProtoType())
	vec.append(Vector.ByTwoPoints(startPtXYZ[n], newPts[n]))
	try:
		TransactionManager.Instance.EnsureInTransaction(doc)
		ug.Location.Move(vec[n].ToRevitType())
		TransactionManager.Instance.TransactionTaskDone()
	except:
		e.append(Exception)
	n += 1
	if n > len(startPtXYZ):
		break
	else:
		continue
# Assign your output to the OUT variable.
OUT = crv, startPtXYZ, newPts, e, vec